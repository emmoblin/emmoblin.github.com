<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: skill | Emmoblin Blog]]></title>
  <link href="http://emmoblin.github.com/blog/categories/skill/atom.xml" rel="self"/>
  <link href="http://emmoblin.github.com/"/>
  <updated>2013-03-03T00:06:52+08:00</updated>
  <id>http://emmoblin.github.com/</id>
  <author>
    <name><![CDATA[emmoblin]]></name>
    <email><![CDATA[emmoblin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ssh的一些技巧]]></title>
    <link href="http://emmoblin.github.com/blog/2012/10/09/ssh-skill/"/>
    <updated>2012-10-09T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2012/10/09/ssh-skill</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">ssh的一些技巧</a>
<ul>
<li><a href="#sec-1-1">多条连接共享</a></li>
<li><a href="#sec-1-2">长连接</a></li>
<li><a href="#sec-1-3">别再输入密码</a></li>
<li><a href="#sec-1-4">省去用户名</a></li>
<li><a href="#sec-1-5">在服务器间跳转</a></li>
<li><a href="#sec-1-6">穿越Web代理</a></li>
<li><a href="#sec-1-7">shfs</a></li>
<li><a href="#sec-1-8">使用本地App连接远程服务器</a></li>
<li><a href="#sec-1-9">减少延迟</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.com{{ page.url }}">ssh的一些技巧</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">多条连接共享</h3>
<div class="outline-text-3" id="text-1-1">

<p>如果你需要在多个窗口中打开到同一个服务器的连接，而不想每次都输入用户名，密码，或是等待连接建立，<br/>
那么你可以配置SSH的连接共享选项，在本地打开你的SSH配置文件，通常它们位于~/.ssh/config，然后添加下面2行：<br/>
ControlMaster auto<br/>
ControlPath /tmp/ssh_mux_%h_%p_%r<br/>
现在试试断开你与服务器的连接，并建立一条新连接，然后打开一个新窗口，再创建一条连接，你会发现，第二条连接几乎是在瞬间就建立好了。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">长连接</h3>
<div class="outline-text-3" id="text-1-2">

<p>如果你发现自己每条需要连接同一个服务器无数次，那么长连接选项就是为你准备的：<br/>
ControlPersist 4h<br/>
现在你每次通过SSH与服务器建立连接之后，这条连接将被保持4个小时，即使在你退出服务器之后，这条连接依然可以重用，<br/>
因此，在你下一次（4小时之内）登录服务器时，你会发现连接以闪电般的速度建立完成，<br/>
这个选项对于通过scp拷贝多个文件提速尤其明显，因为你不在需要为每个文件做单独的认证了。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">别再输入密码</h3>
<div class="outline-text-3" id="text-1-3">

<p>如果你还在通过密码方式登录SSH，那么你或许应该试试SSH Keys，首先使用OpenSSH为自己声称一对密钥：<br/>
$ ssh-keygen<br/>
跟随指示，完成之后，你应该可以在你的.ssh目录下看到两个文件，id_rsa就是你的私钥，而id_ras.pub则是你的公钥，<br/>
现在你需要将你的公钥拷贝到服务器上，如果你的系统有ssh-copy-id命令，拷贝会很简单：<br/>
$ ssh-copy-id smylers@compo.example.org<br/>
否则，你需要手动将你的私钥拷贝的服务器上的~/.ssh/authorized_keys文件中：<br/>
$ &lt; ~/.ssh/id_rsa.pub ssh clegg.example.org ‘mkdir -p .ssh; cat &gt;&gt; .ssh/authorized_keys; chmod go-w .ssh .ssh/authorized_keys’<br/>
现在试试重新连接到SSH服务器，或是拷贝文件，是不是已经不需要再输入密码了？<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4">省去用户名</h3>
<div class="outline-text-3" id="text-1-4">

<p>如果你在远程服务器上的用户名和你本地的用户名不同，你同样可以在SSH配置中进行设置：<br/>
Host www* mail<br/>
HostName %h.example.com<br/>
User simon<br/>
现在就算我的本地用户名是 smylers，我仍然可以这样连接我的服务器：<br/>
$ ssh www2<br/>
SSH会使用simon账户连接你的服务器，同样，Putty可以保存这个信息在你的session中。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-5" class="outline-3">
<h3 id="sec-1-5">在服务器间跳转</h3>
<div class="outline-text-3" id="text-1-5">

<p>有些时候，你可能没法直接连接到某台服务器，而需要使用一台中间服务器进行中转，这个过程也可以自动化。首先确保你已经为服务器配置了公钥访问，并开启了agent forwarding，现在你就可以通过2条命令来连接目标服务器，不会有任何提示输入：<br/>
$ ssh gateway<br/>
gateway $ ssh db<br/>
然后在你的本地SSH配置中，添加下面这条配置：<br/>
Host db<br/>
HostName db.internal.example.com<br/>
ProxyCommand ssh gateway netcat -q 600 %h %p<br/>
现在你就可以通过一条命令来直接连接目标服务器了:<br/>
$ ssh db<br/>
这里你可能会需要等待长一点的时间，因为SSH需要进行两次认证，，注意netcat也有可能被写成nc或者ncat或者前面还需要加上g，你需要检查你的中间服务器来确定实际的参数。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-6" class="outline-3">
<h3 id="sec-1-6">穿越Web代理</h3>
<div class="outline-text-3" id="text-1-6">

<p>有些时候，你所在的网络不止封锁SSH端口，它们有可能更进一步，只让你通过Web代理来访问网络，幸运的是我们有一个叫做Corkscrew的程序可以通过Web代理来发送SSH数据。Corkscrew的使用非常简单，一般我都是在需要时搜索，然后直接下载，跟随网站上的指示，然后就搞定了，一般你需要这样一条配置：<br/>
ProxyCommand corkscrew proxy.example.org 8080 %h %p<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-7" class="outline-3">
<h3 id="sec-1-7">shfs</h3>
<div class="outline-text-3" id="text-1-7">

<p>另一种让远程GUI程序显示在本地的替代方案就是让本地的GUI程序可以直接操作远程文件，你可以通过SSHFS来实现，只需要创建一个空目录，然后使用SSHFS将一个远程目录mount到这个目录就可以了：<br/>
$ mkdir gallery_src<br/>
$ sshfs dev:projects/gallery/src gallery_src<br/>
$ cd gallery_src<br/>
$ ls<br/>
现在你就可以使用任何你喜欢的本地程序来便捷这个目录中的文件了，它们看起来是在你的本地，但其实时远程服务器上的文件，你可以使用fusermount命令来unmount这些文件，不要担心记不住，它们就在<br/>
sshfs手册的顶上：<br/>
$ cd ..<br/>
$ fusermount -u gallery_src<br/>
SSHFS可以在Linux和OSX上工作，Windows用户我目前还没找到什么好办法。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-8" class="outline-3">
<h3 id="sec-1-8">使用本地App连接远程服务器</h3>
<div class="outline-text-3" id="text-1-8">

<p>有时可能有些服务，比如数据库或是Web服务器，它们运行在远程服务器上，但是如果有用方式可以直接从本地程序连接它们，那会非常有用，要做到这一点，你需要用到端口转发(port forwarding)，<br/>
举个例子，如果你的服务器运行Postgres（并且只允许本地访问），那么你就可以在你的SSH配置中加入：<br/>
Host db<br/>
LocalForward 5433 localhost:5432<br/>
现在当你连接你的SSH服务器时，它会在你本地电脑打开一个5433端口（我随便挑的），并将所有发送到这个端口的数据转发到服务器的5432端口（Postgres的默认端口），然后，只要你和服务器建立了连接，你就可以通过5433端口来访问服务器的Postgres了。<br/>
$ ssh db<br/>
现在打开另外一个窗口，你就可以通过下面这条命令在本地连接你的Postgres数据库了：<br/>
$ psql -h localhost -p 5443 orders<br/>
如果你想要使用服务器不支持的图形化Postgres客户端时，这条命令会显得尤其有用：<br/>
$ pgadmin3 &amp;<br/>
或者你有一个后台的Web服务器，你不希望直接通过Internet访问它，你也可以通过端口转发来访问它：<br/>
Host api<br/>
LocalForward 8080 localhost:80<br/>
现在连接到服务器：<br/>
$ ssh api<br/>
然后将浏览器指向你选择的端口号：<br/>
$ firefox <a href="http://localhost:8080/">http://localhost:8080/</a><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-9" class="outline-3">
<h3 id="sec-1-9">减少延迟</h3>
<div class="outline-text-3" id="text-1-9">

<p>如果每次连接服务器都意味着你需要等待几十秒而无所事事，那么你或许应该试试在你的SSH配置中加入下面这条：<br/>
GSSAPIAuthentication no<br/>
如果这条命令有效的话，你应该通知你的系统管理员让他在服务器上禁用这个选项，这样其他人就不用再分别添加这条配置到它们的本地配置了。<br/>
在server端修改：<br/>
/etc/ssh/sshd_config<br/>
添加<br/>
USEDNS no<br/>
service sshd restart<br/>
</p>
<p><br/>
</p></div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
