<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testunit | Emmoblin Blog]]></title>
  <link href="http://emmoblin.github.com/blog/categories/testunit/atom.xml" rel="self"/>
  <link href="http://emmoblin.github.com/"/>
  <updated>2013-02-12T23:54:59+08:00</updated>
  <id>http://emmoblin.github.com/</id>
  <author>
    <name><![CDATA[emmoblin]]></name>
    <email><![CDATA[emmoblin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mock测试]]></title>
    <link href="http://emmoblin.github.com/blog/2010/08/08/mock-test/"/>
    <updated>2010-08-08T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2010/08/08/mock-test</id>
    <content type="html"><![CDATA[<div><div><p><br/>
今天研究了一下cmockery,这是一个google开源的c mock测试框架。<br/>
最主要的功能就是其mock的功能，就是可以模拟函数的返回结果，还可以模拟参数的输入和输出。<br/>
</p>
<p> <br/>
mock的根本思想就是针对测试代码进行单独测试，尽量抛弃对其他模块或者函数的依赖。<br/>
用得最多的就是数据库测试，比如一个函数调用数据库，从中取出一些数据，如果没有mock机制，那就必须组织数据库，提供真的环境。这多少有些太麻烦了。<br/>
所以只需要模拟返回数据库返回的值就行了。这就是叫mock。<br/>
</p>
<p> <br/>
<a href="http://see-see.appspot.com/?p=12001#TestExecution">cmockery中文翻译手册</a><br/>
</p>
<p> <br/>
<a href="http://www.zbitedu.com/?uid-609-action-viewspace-itemid-15317">这是一个例子</a><br/>
</p>
<p> <br/>
还有在lua测试框架中，还有一个简单的库，叫lmock，提供简单的lua中的mock的功能。<br/>
<a href="http://luaforge.net/projects/lmock/">http://luaforge.net/projects/lmock/</a><br/>
</p>
<p> <br/>
</p>
<p> <br/>
但是我觉得这种mock的方法，实际上是要通过修改链接来完成的，对于代码的组织要求比较高。基本上这些模拟的外接口都要独立在不同的文件中，这样才好mock。<br/>
</p></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lua调用c函数进行单元测试]]></title>
    <link href="http://emmoblin.github.com/blog/2010/08/06/lua-call-c-function-to-unit-test/"/>
    <updated>2010-08-06T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2010/08/06/lua-call-c-function-to-unit-test</id>
    <content type="html"><![CDATA[<div><div><p><br/>
之所以使用lua进行单元测试，而不用cunit，我觉得主要是考虑一下几点：<br/>
1）lua测试命令行，优势明显<br/>
2）cunit对函数进行单元测试的功能，用lua也可以做到。而且参数可以通过lua传递，更加灵活，修改测试用例不需要重新编译。<br/>
以前用cunit写的时候，修改一下就要重新编译，而且还要继续内存的管理。测试用例写多了有点厌烦。<br/>
</p>
<p><br/>
下面主要看看Lua调用c函数进行单元测试：<br/>
</p>
<p><br/>
这是lua代码，<br/>
</p>
<p><br/>
</p>
<p><br/>
<pre class="src src-lua"><span style="color: #0000ff;">local</span> <span style="color: #ff1493;">iptable</span> = {}

<span style="color: #8c8c8c; font-style: italic;">--</span><span style="color: #8c8c8c; font-style: italic;">&#32452;&#32455;&#36755;&#20837;&#21442;&#25968;</span>
<span style="color: #0000ff;">for</span> num = 1,5 <span style="color: #0000ff;">do</span>
 <span style="color: #0000ff;">local</span> <span style="color: #ff1493;">newip</span> = {[<span style="color: #00bfff;">"ip"</span>]=<span style="color: #00bfff;">"192.168.1."</span>..num, [<span style="color: #00bfff;">"up"</span>]=0, [<span style="color: #00bfff;">"down"</span>]=0}
 iptable[num] = newip
 print(iptable[num].ip, iptable[num].up, iptable[num].down)
<span style="color: #0000ff;">end</span>

<span style="color: #8c8c8c; font-style: italic;">--</span><span style="color: #8c8c8c; font-style: italic;">&#35843;&#29992;&#34987;&#27979;&#35797;&#30340;c&#20989;&#25968;</span>
qostest.qos_add_e(iptable)

<span style="color: #8c8c8c; font-style: italic;">--</span><span style="color: #8c8c8c; font-style: italic;">&#26816;&#27979;&#36820;&#22238;&#32467;&#26524;&#26159;&#21542;&#26159;&#39044;&#26399;&#32467;&#26524;&#65292;&#36825;&#37324;&#21482;&#26159;&#31616;&#21333;&#30340;&#25171;&#21360;&#20102;&#19968;&#19979;&#65292;&#27809;&#26377;&#29992;assert</span>
<span style="color: #0000ff;">for</span> num = 1,5 <span style="color: #0000ff;">do</span>
 print(iptable[num].ip, iptable[num].up, iptable[num].down)
<span style="color: #0000ff;">end</span>
</pre>


下面是对应的c函数的实现：<br/>
其中最容易出错的地方就是对于当前栈的层次，要时刻记住每一个lua_* 相关的操作后，栈会变成什么样子。<br/>
建议全部使用正数代表index，混合使用正数和负数比较容易出错。<br/>
</p>
<p><br/>
</p>
<p><br/>
<pre class="src src-c"><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> <span style="color: #a020f0;">qos_add_e</span> (<span style="color: #0000ff;">lua_State</span> *<span style="color: #ff1493;">L</span>) {
    <span style="color: #0000ff;">__u32</span> *<span style="color: #ff1493;">handle</span>,<span style="color: #ff1493;">ip</span>;
    <span style="color: #0000ff;">int</span> <span style="color: #ff1493;">i</span> = 0, <span style="color: #ff1493;">ipnum</span> = 0;

    ipnum = lua_objlen(L, 1);
    printf(<span style="color: #00bfff;">"in libqostst qID = %u pID = %u ipnum = %d\n"</span>
        , qID, pID, ipnum);

    <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">char</span> *<span style="color: #ff1493;">ipstr</span> = <span style="color: #ff0000;">NULL</span>;
    <span style="color: #0000ff;">for</span> ( i = 1; i &lt;= ipnum; i++ ) {
        lua_pushnumber(L, i);<span style="color: #8c8c8c; font-style: italic;">//</span><span style="color: #8c8c8c; font-style: italic;">push key</span>

        lua_gettable(L, 1);<span style="color: #8c8c8c; font-style: italic;">//</span><span style="color: #8c8c8c; font-style: italic;">get value ,get level 1 table</span>

        lua_getfield(L, 2, <span style="color: #00bfff;">"ip"</span>);
        ipstr = luaL_checkstring(L, 3);

        printf(<span style="color: #00bfff;">"%d=%s\n"</span>, i, ipstr);
        ip = ntohl(inet_addr(ipstr));

        <span style="color: #8c8c8c; font-style: italic;">//</span><span style="color: #8c8c8c; font-style: italic;">&#20256;&#20837;ip&#65292;&#36820;&#22238;&#19978;&#19979;&#34892;&#30340;handle</span>
        testfunc(ip, handle)
        <span style="color: #8c8c8c; font-style: italic;">//</span><span style="color: #8c8c8c; font-style: italic;">return handle to lua</span>
        lua_pushnumber(L, handle[0]);
        lua_setfield(L, 2, <span style="color: #00bfff;">"up"</span>);
        lua_pop(L, 2);
    }

    <span style="color: #0000ff;">return</span> 1;
}
</pre>


</p></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初步体验lua写测试用例的简单]]></title>
    <link href="http://emmoblin.github.com/blog/2010/08/02/first-luaunit-testcase/"/>
    <updated>2010-08-02T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2010/08/02/first-luaunit-testcase</id>
    <content type="html"><![CDATA[<div><div><p><br/>
直接上代码，看看到底用脚本写测试用例到底有多简单。<br/>
</p>
<p><br/>
</p>
<p><br/>
<pre class="src src-lua"><span style="color: #a020f0;">lsystem</span> = <span style="color: #0000ff;">function</span> (arg)
    print(<span style="color: #00bfff;">"cmd:\e\[31m"</span>..arg..<span style="color: #00bfff;">"\e\[0m"</span>)
    <span style="color: #0000ff;">local</span> <span style="color: #ff1493;">date</span> = io.popen(arg, r)
    <span style="color: #0000ff;">local</span> <span style="color: #ff1493;">str</span> = date:read<span style="color: #00bfff;">"*a"</span>
    date:close()
    <span style="color: #0000ff;">return</span> str
<span style="color: #0000ff;">end</span>
<span style="color: #8c8c8c; font-style: italic;">--</span><span style="color: #8c8c8c; font-style: italic;">&#27979;&#35797;mac&#22320;&#22336;&#30340;&#26174;&#31034;&#26159;&#21542;&#27491;&#30830;</span>
<span style="color: #0000ff;">function</span> <span style="color: #a020f0;">test_ipshow</span>()
    date = lsystem(<span style="color: #00bfff;">"ip addr show eth1"</span>)
    assert_match(<span style="color: #00bfff;">"00:0a:e4:36:06:24"</span>,date)
<span style="color: #0000ff;">end</span>
</pre>


简单到无法再简单的程序，只需要两句话，<br/>
第一句是执行命令。<br/>
第二句是判断返回内容是否正确。<br/>
</p>
<p><br/>
优势一：<br/>
如果要使用Cunit进行同样的测试，当然也基本上也都是这几行语句，但是最麻烦的就是需要对内存进行管理。<br/>
优势二：<br/>
同时使用c语言的字符串匹配没有脚本语言强大，至少支持正则匹配。<br/>
优势三：<br/>
不需要编译，直接修改，解释执行。<br/>
</p></div>
</div>

]]></content>
  </entry>
  
</feed>
