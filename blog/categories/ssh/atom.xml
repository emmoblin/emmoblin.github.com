<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ssh | Emmoblin Blog]]></title>
  <link href="http://emmoblin.github.com/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://emmoblin.github.com/"/>
  <updated>2013-08-07T10:34:45+08:00</updated>
  <id>http://emmoblin.github.com/</id>
  <author>
    <name><![CDATA[emmoblin]]></name>
    <email><![CDATA[emmoblin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ssh隧道技术]]></title>
    <link href="http://emmoblin.github.com/blog/2013/02/19/ssh-tunnel/"/>
    <updated>2013-02-19T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2013/02/19/ssh-tunnel</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">ssh隧道技术</a>
<ul>
<li><a href="#sec-1-1">什么情况下使用隧道</a></li>
<li><a href="#sec-1-2">建立本地隧道</a>
<ul>
<li><a href="#sec-1-2-1">通过SSH隧道建立SOCKS服务器</a></li>
</ul>
</li>
<li><a href="#sec-1-3">建立远程SSH隧道</a></li>
<li><a href="#sec-1-4">一些技巧</a>
<ul>
<li><a href="#sec-1-4-1">检查隧道状态</a></li>
<li><a href="#sec-1-4-2">如何将端口绑定到外部地址上</a></li>
<li><a href="#sec-1-4-3">自动连接和防断线脚本</a></li>
</ul>
</li>
<li><a href="#sec-1-5">动态域名</a></li>
<li><a href="#sec-1-6">参考</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/ssh/atom.xml">ssh隧道技术</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">什么情况下使用隧道</h3>
<div class="outline-text-3" id="text-1-1">

<ol>
<li>公司为了防止我们用XX软件封锁了它的端口或者服务器地址。<br/>
</li>
<li>nat穿越，或者叫ssh反向隧道访问内网的pc，比如：在家里访问我在公司的电脑。<br/>
</li>
</ol>


<p><br/>
通过在外网一个ssh服务器做代理，实现穿越功能。<br/>
我主要使用第二种功能，在家里访问公司的电脑。可以远程办公了。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">建立本地隧道</h3>
<div class="outline-text-3" id="text-1-2">

<p>建立本地隧道实现第一种隧道模式。<br/>
假设内网机子A要访问C，但被拒绝了，这样可以通过中间的B建立ssh本地隧道实现A-B-C的访问。<br/>
实际上这种一般不太常用，毕竟有很多代理服务器都可以方便实现代理功能。<br/>
</p>
<p><br/>
在A上执行：<br/>
</p>
<p><br/>
<pre class="src src-sh">ssh -N -f -L 2121:C:21 B
ftp localhost:2121 <span style="color: #8c8c8c; font-style: italic;"># </span><span style="color: #8c8c8c; font-style: italic;">&#29616;&#22312;&#35775;&#38382;&#26412;&#22320;2121&#31471;&#21475;&#65292;&#23601;&#33021;&#36830;&#25509;C&#30340;21&#31471;&#21475;&#20102;</span>
</pre>


这里我们用到了SSH客户端的三个参数:<br/>
-N 告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发<br/>
-f 告诉SSH客户端在后台运行<br/>
-L 做本地映射端口，被冒号分割的三个部分含义分别是<br/>
需要使用的本地端口号<br/>
需要访问的目标机器IP地址（IP: 234.234.234.234）<br/>
需要访问的目标机器端口（端口: 21)<br/>
最后一个参数是我们用来建立隧道的中间机器的IP地址(IP: 123.123.123.123)<br/>
</p>
<p><br/>
我们再重复一下-L参数的行为。<br/>
-L X:Y:Z 将IP为Y的机器的Z端口通过中间服务器映射到本地机器的X端口。<br/>
</p>
<p><br/>
在这条命令成功执行之后，我们已经具有绕过公司防火墙的能力，并且成功访问到了我们喜欢的一个FTP服务器了。<br/>
</p>
<p><br/>
</p>
</div>

<div id="outline-container-1-2-1" class="outline-4">
<h4 id="sec-1-2-1">通过SSH隧道建立SOCKS服务器</h4>
<div class="outline-text-4" id="text-1-2-1">

<p>如果我们需要借助一台中间服务器访问很多资源，一个个映射显然不是高明的办法。<br/>
幸好，SSH客户端为我们提供了通过SSH隧道建立SOCKS服务器的功能。<br/>
</p>
<p><br/>
通过下面的命令我们可以建立一个通过123.123.123.123的SOCKS服务器。<br/>
ssh -N -f -D 0.0.0.0:1080 123.123.123.123 # 将端口绑定在0.0.0.0上<br/>
通过SSH建立的SOCKS服务器使用的是SOCKS5协议，在为应用程序设置SOCKS代理的时候要特别注意。<br/>
</p>
<p><br/>
</p></div>
</div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">建立远程SSH隧道</h3>
<div class="outline-text-3" id="text-1-3">

<p>现象我想在家里访问公司内网的电脑，这时从外到内访问显然是不行的，但从公司内往外访问是正常的。<br/>
所以就是用远程ssh隧道，先通过内网ssh到B，然后通过访问B的端口就可以访问内网的A了。<br/>
</p>
<p><br/>
在A上执行：<br/>
<code>ssh -N -f -R 2222:127.0.0.1:22 B</code><br/>
现在，在B机器上我们用下面的命令就可以登陆公司的A机器了。<br/>
<code>ssh -p 2222 localhost</code><br/>
</p>
<p><br/>
我们现在重点说说参数-R。该参数的三个部分的含义分别是:<br/>
远程机器使用的端口（2222）<br/>
需要映射的内部机器的IP地址(127.0.0.1)<br/>
需要映射的内部机器的端口(22)<br/>
例如：-R X:Y:Z 就是把我们内部的Y机器的Z端口映射到远程机器的X端口上。<br/>
</p>
<p><br/>
实际上这里所说的本地隧道和远程隧道(-L,-R),实际上指的是ssh代理listen的端口在本地还是在远端。<br/>
如果在本地listen就是本地隧道，如果要是在远端listen一个端口就是远端隧道。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4">一些技巧</h3>
<div class="outline-text-3" id="text-1-4">


</div>

<div id="outline-container-1-4-1" class="outline-4">
<h4 id="sec-1-4-1">检查隧道状态</h4>
<div class="outline-text-4" id="text-1-4-1">

<p>有些时候隧道会因为一些原因通信不畅而卡死，例如：由于传输数据量太大，被路由器带入stalled状态。这种时候，往往SSH客户端并不退出，而是卡死在那里。一种应对方法是，使用SSH客户端的ServerAliveInterval和ServerAliveCountMax选项。ServerAliveInterval会在隧道无通信后的一段设置好的时间后发送一个请求给服务器要求服务器响应。如果服务器在ServerAliveCountMax次请求后都没能响应，那么SSH客户端就自动断开连接并退出，将控制权交给你的监控程序。这两个选项的设置方法分别是在ssh时加入-o ServerAliveInterval=n和-o ServerAliveCountMax=m。其中n, m可以自行定义。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-4-2" class="outline-4">
<h4 id="sec-1-4-2">如何将端口绑定到外部地址上</h4>
<div class="outline-text-4" id="text-1-4-2">

<p>使用上面的方法，映射的端口只能绑定在127.0.0.1这个接口上。也就是说，只能被本机自己访问到。如何才能让其他机器访问这个端口呢？我们可以把这个映射的端口绑定在0.0.0.0的接口上，方法是加上参数-b 0.0.0.0。同时还需要打开SSH服务器端的一个选项－GatewayPorts。默认情况下它应当是被打开的。如果被关闭的话，可以在/etc/sshd_config中修改GatewayPorts no为GatewayPorts yes来打开它。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-4-3" class="outline-4">
<h4 id="sec-1-4-3">自动连接和防断线脚本</h4>
<div class="outline-text-4" id="text-1-4-3">

<p>Linux平台ssh默认不支持把密码作为参数，不过有sshpass可以搞定<br/>
</p>
<p><br/>
<a href="http://sourceforge.net/projects/sshpass/files/latest/download">http://sourceforge.net/projects/sshpass/files/latest/download</a><br/>
</p>
<p><br/>
下载，解压，编译，把可执行文件拷贝到合适的目录，执行命令格式如下：<br/>
</p>
<p><br/>
<code>sshpass -p "password" ssh -D 7070 user@serverip</code><br/>
</p>
<p><br/>
貌似ubuntu下可以直接apt-get install sshpass<br/>
</p>
<p><br/>
然后写脚本autossh.sh，内容如下：<br/>
</p>
<p><br/>
</p>
<p><br/>
<pre class="src src-sh"><span style="color: #8c8c8c; font-style: italic;">#</span><span style="color: #8c8c8c; font-style: italic;">!/bin/</span><span style="color: #0000ff;">bash</span>
<span style="color: #0000ff;">while</span> [ <span style="color: #00bfff;">''</span> == <span style="color: #00bfff;">''</span> ]
<span style="color: #0000ff;">do</span>
 <span style="color: #ff1493;">ssh_d_process_num</span>=<span style="color: #ff00ff;">`ps aux|grep -E 'ssh \-' |grep -v grep |wc -l`</span>
 <span style="color: #0000ff;">if</span> [ <span style="color: #00bfff;">"$ssh_d_process_num"</span> == <span style="color: #00bfff;">"0"</span> ]; <span style="color: #0000ff;">then</span>
  /home/user/sshpass -p <span style="color: #00bfff;">"password"</span> ssh -D 7070 user@ServerIP &amp;
 <span style="color: #0000ff;">fi</span>

 sleep 300
<span style="color: #0000ff;">done</span>
</pre>


执行一下这个脚本就可以了。sleep 300代表300秒查看一次，可以根据需要调整。<br/>
</p></div>
</div>

</div>

<div id="outline-container-1-5" class="outline-3">
<h3 id="sec-1-5">动态域名</h3>
<div class="outline-text-3" id="text-1-5">

<p>花生壳linux程序下载地址：<br/>
<a href="http://www.oray.com/peanuthull/download_linux.php">http://www.oray.com/peanuthull/download\_linux.php</a><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-6" class="outline-3">
<h3 id="sec-1-6">参考</h3>
<div class="outline-text-3" id="text-1-6">

<p><a href="http://blog.creke.net/722.html">http://blog.creke.net/722.html</a><br/>
</p></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh的一些技巧]]></title>
    <link href="http://emmoblin.github.com/blog/2012/10/09/ssh-skill/"/>
    <updated>2012-10-09T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2012/10/09/ssh-skill</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">ssh的一些技巧</a>
<ul>
<li><a href="#sec-1-1">多条连接共享</a></li>
<li><a href="#sec-1-2">长连接</a></li>
<li><a href="#sec-1-3">别再输入密码</a></li>
<li><a href="#sec-1-4">省去用户名</a></li>
<li><a href="#sec-1-5">在服务器间跳转</a></li>
<li><a href="#sec-1-6">穿越Web代理</a></li>
<li><a href="#sec-1-7">shfs</a></li>
<li><a href="#sec-1-8">使用本地App连接远程服务器</a></li>
<li><a href="#sec-1-9">减少延迟</a></li>
<li><a href="#sec-1-10">ssh-agent</a></li>
<li><a href="#sec-1-11">保持链接不断</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/ssh/atom.xml">ssh的一些技巧</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">多条连接共享</h3>
<div class="outline-text-3" id="text-1-1">

<p>如果你需要在多个窗口中打开到同一个服务器的连接，而不想每次都输入用户名，密码，或是等待连接建立，<br/>
那么你可以配置SSH的连接共享选项，在本地打开你的SSH配置文件，通常它们位于~/.ssh/config，然后添加下面2行：<br/>
ControlMaster auto<br/>
ControlPath /tmp/ssh_mux_%h_%p_%r<br/>
现在试试断开你与服务器的连接，并建立一条新连接，然后打开一个新窗口，再创建一条连接，你会发现，第二条连接几乎是在瞬间就建立好了。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">长连接</h3>
<div class="outline-text-3" id="text-1-2">

<p>如果你发现自己每条需要连接同一个服务器无数次，那么长连接选项就是为你准备的：<br/>
ControlPersist 4h<br/>
现在你每次通过SSH与服务器建立连接之后，这条连接将被保持4个小时，即使在你退出服务器之后，这条连接依然可以重用，<br/>
因此，在你下一次（4小时之内）登录服务器时，你会发现连接以闪电般的速度建立完成，<br/>
这个选项对于通过scp拷贝多个文件提速尤其明显，因为你不在需要为每个文件做单独的认证了。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">别再输入密码</h3>
<div class="outline-text-3" id="text-1-3">

<p>如果你还在通过密码方式登录SSH，那么你或许应该试试SSH Keys，首先使用OpenSSH为自己声称一对密钥：<br/>
$ ssh-keygen<br/>
跟随指示，完成之后，你应该可以在你的.ssh目录下看到两个文件，id_rsa就是你的私钥，而id_ras.pub则是你的公钥，<br/>
现在你需要将你的公钥拷贝到服务器上，如果你的系统有ssh-copy-id命令，拷贝会很简单：<br/>
$ ssh-copy-id smylers@compo.example.org<br/>
否则，你需要手动将你的私钥拷贝的服务器上的~/.ssh/authorized_keys文件中：<br/>
$ &lt; ~/.ssh/id_rsa.pub ssh clegg.example.org ‘mkdir -p .ssh; cat &gt;&gt; .ssh/authorized_keys; chmod go-w .ssh .ssh/authorized_keys’<br/>
</p>
<p><br/>
或者 cat ~/.ssh/id_dsa.pub | ssh you@remote 'cat - &gt;&gt; ~/.ssh/authorized_keys'<br/>
现在试试重新连接到SSH服务器，或是拷贝文件，是不是已经不需要再输入密码了？<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4">省去用户名</h3>
<div class="outline-text-3" id="text-1-4">

<p>如果你在远程服务器上的用户名和你本地的用户名不同，你同样可以在SSH配置中进行设置：<br/>
Host www* mail<br/>
HostName %h.example.com<br/>
User simon<br/>
现在就算我的本地用户名是 smylers，我仍然可以这样连接我的服务器：<br/>
$ ssh www2<br/>
SSH会使用simon账户连接你的服务器，同样，Putty可以保存这个信息在你的session中。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-5" class="outline-3">
<h3 id="sec-1-5">在服务器间跳转</h3>
<div class="outline-text-3" id="text-1-5">

<p>有些时候，你可能没法直接连接到某台服务器，而需要使用一台中间服务器进行中转，这个过程也可以自动化。<br/>
首先确保你已经为服务器配置了公钥访问，并开启了agent forwarding，现在你就可以通过2条命令来连接目标服务器，不会有任何提示输入：<br/>
$ ssh gateway<br/>
gateway $ ssh db<br/>
然后在你的本地SSH配置中，添加下面这条配置：<br/>
Host db<br/>
HostName db.internal.example.com<br/>
ProxyCommand ssh gateway netcat -q 600 %h %p<br/>
现在你就可以通过一条命令来直接连接目标服务器了:<br/>
$ ssh db<br/>
这里你可能会需要等待长一点的时间，因为SSH需要进行两次认证，注意netcat也有可能被写成nc或者ncat或者前面还需要加上g，你需要检查你的中间服务器来确定实际的参数。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-6" class="outline-3">
<h3 id="sec-1-6">穿越Web代理</h3>
<div class="outline-text-3" id="text-1-6">

<p>有些时候，你所在的网络不止封锁SSH端口，它们有可能更进一步，只让你通过Web代理来访问网络，幸运的是我们有一个叫做Corkscrew的程序可以通过Web代理来发送SSH数据。Corkscrew的使用非常简单，一般我都是在需要时搜索，然后直接下载，跟随网站上的指示，然后就搞定了，一般你需要这样一条配置：<br/>
ProxyCommand corkscrew proxy.example.org 8080 %h %p<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-7" class="outline-3">
<h3 id="sec-1-7">shfs</h3>
<div class="outline-text-3" id="text-1-7">

<p>另一种让远程GUI程序显示在本地的替代方案就是让本地的GUI程序可以直接操作远程文件，你可以通过SSHFS来实现，只需要创建一个空目录，然后使用SSHFS将一个远程目录mount到这个目录就可以了：<br/>
$ mkdir gallery_src<br/>
$ sshfs dev:projects/gallery/src gallery_src<br/>
$ cd gallery_src<br/>
$ ls<br/>
现在你就可以使用任何你喜欢的本地程序来便捷这个目录中的文件了，它们看起来是在你的本地，但其实时远程服务器上的文件，你可以使用fusermount命令来unmount这些文件，不要担心记不住，它们就在<br/>
sshfs手册的顶上：<br/>
$ cd ..<br/>
$ fusermount -u gallery_src<br/>
SSHFS可以在Linux和OSX上工作，Windows用户我目前还没找到什么好办法。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-8" class="outline-3">
<h3 id="sec-1-8">使用本地App连接远程服务器</h3>
<div class="outline-text-3" id="text-1-8">

<p>有时可能有些服务，比如数据库或是Web服务器，它们运行在远程服务器上，但是如果有用方式可以直接从本地程序连接它们，那会非常有用，要做到这一点，你需要用到端口转发(port forwarding)，<br/>
举个例子，如果你的服务器运行Postgres（并且只允许本地访问），那么你就可以在你的SSH配置中加入：<br/>
Host db<br/>
LocalForward 5433 localhost:5432<br/>
现在当你连接你的SSH服务器时，它会在你本地电脑打开一个5433端口（我随便挑的），并将所有发送到这个端口的数据转发到服务器的5432端口（Postgres的默认端口），然后，只要你和服务器建立了连接，你就可以通过5433端口来访问服务器的Postgres了。<br/>
$ ssh db<br/>
现在打开另外一个窗口，你就可以通过下面这条命令在本地连接你的Postgres数据库了：<br/>
$ psql -h localhost -p 5443 orders<br/>
如果你想要使用服务器不支持的图形化Postgres客户端时，这条命令会显得尤其有用：<br/>
$ pgadmin3 &amp;<br/>
或者你有一个后台的Web服务器，你不希望直接通过Internet访问它，你也可以通过端口转发来访问它：<br/>
Host api<br/>
LocalForward 8080 localhost:80<br/>
现在连接到服务器：<br/>
$ ssh api<br/>
然后将浏览器指向你选择的端口号：<br/>
$ firefox <a href="http://localhost:8080/">http://localhost:8080/</a><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-9" class="outline-3">
<h3 id="sec-1-9">减少延迟</h3>
<div class="outline-text-3" id="text-1-9">

<p>如果每次连接服务器都意味着你需要等待几十秒而无所事事，那么你或许应该试试在你的SSH配置中加入下面这条：<br/>
GSSAPIAuthentication no<br/>
如果这条命令有效的话，你应该通知你的系统管理员让他在服务器上禁用这个选项，这样其他人就不用再分别添加这条配置到它们的本地配置了。<br/>
在server端修改：<br/>
/etc/ssh/sshd_config<br/>
添加<br/>
USEDNS no<br/>
service sshd restart<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-10" class="outline-3">
<h3 id="sec-1-10">ssh-agent</h3>
<div class="outline-text-3" id="text-1-10">

<p>如果你的密码加了密码，每次使用密钥都需要输入密码，则这时ssh-agent就起到作用了。<br/>
启动ssh-agent后，通过ssh-add ~/.ssh/id_rsa <br/>
把自己的私钥添加到agent后，以后再使用次密钥就不需要输入密码了。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-11" class="outline-3">
<h3 id="sec-1-11">保持链接不断</h3>
<div class="outline-text-3" id="text-1-11">

<p>有的时候中间有防火墙，防火墙的session很短时间就会超时，导致ssh登录中断。需要在客户端这边配置。<br/>
</p>
<p><br/>
只需要在sshd的配置文件上（/etc/ssh/sshd_config）加上两个选项就<br/>
行：ClientAliveInterval 10和ClientAliveCountMax 100000000。其中<br/>
ClientAliveInterval是保活数据包发送的时间间隔，这个数字可以自己选定，单<br/>
位是 秒；ClientAliveCountMax是保活数据包发送的次数上限，这里的设置应该是<br/>
无敌的。<br/>
TCPKeepAlive yes<br/>
</p>
<p><br/>
</p></div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
