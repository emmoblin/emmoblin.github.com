<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: service | Emmoblin Blog]]></title>
  <link href="http://emmoblin.github.com/blog/categories/service/atom.xml" rel="self"/>
  <link href="http://emmoblin.github.com/"/>
  <updated>2013-08-07T10:50:28+08:00</updated>
  <id>http://emmoblin.github.com/</id>
  <author>
    <name><![CDATA[emmoblin]]></name>
    <email><![CDATA[emmoblin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql命令行]]></title>
    <link href="http://emmoblin.github.com/blog/2013/04/04/mysql-cmd/"/>
    <updated>2013-04-04T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2013/04/04/mysql-cmd</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">mysql命令行</a>
<ul>
<li><a href="#sec-1-1">mysql</a>
<ul>
<li><a href="#sec-1-1-1">命令行登录MySQL数据库服务器</a></li>
<li><a href="#sec-1-1-2">数据库操作SQL语句</a></li>
<li><a href="#sec-1-1-3">表操作SQL语句（登录之后必须用以上的USE命令选择一个数据库，再进行表操作）</a></li>
<li><a href="#sec-1-1-4">数据库权限操作SQL语句</a></li>
<li><a href="#sec-1-1-5">mysqldump备份数据库</a></li>
<li><a href="#sec-1-1-6">mysql配置文件</a></li>
<li><a href="#sec-1-1-7">mysql_install_db</a></li>
<li><a href="#sec-1-1-8">设置密码</a></li>
<li><a href="#sec-1-1-9">MySQL 远程连接配置</a>
<ul>
<li><a href="#sec-1-1-9-1">方法一：改表法</a></li>
<li><a href="#sec-1-1-9-2">方法二：授权法 (推荐使用)</a></li>
<li><a href="#sec-1-1-9-3">实际测试</a></li>
<li><a href="#sec-1-1-9-4">参考</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/service/atom.xml">mysql命令行</a></h2>
<div class="outline-text-2" id="text-1">


</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">mysql</h3>
<div class="outline-text-3" id="text-1-1">


<p><br/>
<pre class="src src-sh">yum install mysql mysql-server
service mysqld start
</pre>


</p>
</div>

<div id="outline-container-1-1-1" class="outline-4">
<h4 id="sec-1-1-1">命令行登录MySQL数据库服务器</h4>
<div class="outline-text-4" id="text-1-1-1">

<p>1、登录使用默认3306端口的MySQL<br/>
<code>mysql -u root -p</code><br/>
</p>
<p><br/>
2、通过TCP连接管理不同端口的多个MySQL（注意：MySQL4.1以上版本才有此项功能）<br/>
<code>mysql -u root -p --protocol=tcp --host=localhost --port=3307</code><br/>
</p>
<p><br/>
3、通过socket套接字管理不同端口的多个MySQL<br/>
<code>mysql -u root -p --socket=/tmp/mysql3307.sock</code><br/>
</p>
<p><br/>
4、通过端口和IP管理不同端口的多个MySQL<br/>
<code>mysql -u root -p -P 3306 -h 127.0.0.1</code><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-2" class="outline-4">
<h4 id="sec-1-1-2">数据库操作SQL语句</h4>
<div class="outline-text-4" id="text-1-1-2">

<p>小写也可以<br/>
</p>
<p><br/>
1、显示服务器上当前存在什么数据库<br/>
<code>SHOW DATABASES;</code><br/>
</p>
<p><br/>
2、创建名称为rewin的数据库<br/>
<code>CREATE DATABASE rewin;</code><br/>
</p>
<p><br/>
3、删除名称为rewin的数据库<br/>
<code>DROP DATABASE rewin;</code><br/>
</p>
<p><br/>
4、选择rewin数据库<br/>
<code>USE rewin;</code><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-3" class="outline-4">
<h4 id="sec-1-1-3">表操作SQL语句（登录之后必须用以上的USE命令选择一个数据库，再进行表操作）</h4>
<div class="outline-text-4" id="text-1-1-3">

<p>1、显示当前数据库中存在什么表<br/>
<code>SHOW TABLES;</code><br/>
</p>
<p><br/>
2、创建数据库表zhangyan：在mysql&gt;后粘贴以下SQL语句，存储引擎为MYISAM，字段id为主键、唯一索引。<br/>
</p>
<p><br/>
<pre class="example">CREATE TABLE `zhangyan` (
`id` INT( 5 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
`username` VARCHAR( 20 ) NOT NULL ,
`password` CHAR( 32 ) NOT NULL ,
`time` DATETIME NOT NULL ,
`number` FLOAT( 10 ) NOT NULL ,
`content` TEXT NOT NULL ,
PRIMARY KEY ( `id` ) 
) ENGINE = MYISAM ;
</pre>


3、查看zhangyan表结构<br/>
<code>DESCRIBE zhangyan;</code><br/>
</p>
<p><br/>
4、从表中检索信息<br/>
4.1、从zhangyan表中检索所有记录<br/>
<code>SELECT * FROM zhangyan;</code><br/>
</p>
<p><br/>
4.2、从zhangyan表中检索特定的行：字段username等于abc，字段number等于1，按字段id降序排列<br/>
</p>
<p><br/>
<pre class="example">SELECT * FROM zhangyan WHERE username = 'abc' AND number='1' ORDER BY id DESC;
</pre>


4.3、从zhangyan表中检索指定的字段：username和password<br/>
<code>SELECT username, password FROM zhangyan;</code><br/>
</p>
<p><br/>
4.4、从zhangyan表中检索出唯一的不重复记录：<br/>
<code>SELECT DISTINCT username FROM zhangyan;</code><br/>
</p>
<p><br/>
5、插入信息到zhangyan表<br/>
</p>
<p><br/>
<pre class="example">INSERT INTO zhangyan (id, username, password, time, number, content) VALUES ('', 'abc', '123456', '2007-08-06 14:32:12', '23.41', 'hello world');
</pre>


6、更新zhangyan表中的指定信息<br/>
<code>UPDATE zhangyan SET content = 'hello china' WHERE username = 'abc';</code><br/>
</p>
<p><br/>
7、删除zhangyan表中的指定信息<br/>
<code>DELETE FROM zhangyan WHERE id = 1;</code><br/>
</p>
<p><br/>
8、清空zhangyan表<br/>
<code>DELETE FROM zhangyan;</code><br/>
</p>
<p><br/>
9、删除zhangyan表<br/>
<code>DROP TABLE zhangyan;</code><br/>
</p>
<p><br/>
10、更改表结构，将zhangyan表username字段的字段类型改为CHAR(25)<br/>
<code>ALTER TABLE zhangyan CHANGE username username CHAR(25);</code><br/>
</p>
<p><br/>
11、将当前目录下的mysql.sql导入数据库<br/>
<code>SOURCE ./mysql.sql;</code><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-4" class="outline-4">
<h4 id="sec-1-1-4">数据库权限操作SQL语句</h4>
<div class="outline-text-4" id="text-1-1-4">

<p>1、创建一个具有root权限，可从任何IP登录的用户sina，密码为zhangyan<br/>
</p>
<p><br/>
<pre class="example">GRANT ALL PRIVILEGES ON *.* TO 'sina'@'%' IDENTIFIED BY 'zhangyan' WITH GRANT OPTION;
FLUSH   PRIVILEGES;
</pre>


2、创建一个具有“数据操作”、“结构操作”权限，只能从192.168.1.***登录的用户sina，密码为zhangyan<br/>
</p>
<p><br/>
<pre class="example">GRANT SELECT , INSERT , UPDATE , DELETE , FILE , CREATE , DROP , INDEX , ALTER , CREATE TEMPORARY TABLES , CREATE VIEW , SHOW VIEW , CREATE ROUTINE, ALTER ROUTINE, EXECUTE ON *.* TO 'sina'@'192.168.1.%' IDENTIFIED BY 'zhangyan';
</pre>


3、创建一个只拥有“数据操作”权限，只能从192.168.1.24登录，只能操作rewin数据库的zhangyan表的用户sina，密码为zhangyan<br/>
</p>
<p><br/>
<pre class="example">GRANT SELECT , INSERT , UPDATE , DELETE ON  rewin.zhangyan TO 'sina'@'192.168.1.24' IDENTIFIED BY 'zhangyan';
</pre>


4、创建一个拥有“数据操作”、“结构操作”权限，可从任何IP登录，只能操作rewin数据库的用户sina，密码为zhangyan<br/>
</p>
<p><br/>
<pre class="example">GRANT SELECT , INSERT , UPDATE , DELETE , CREATE , DROP , INDEX , ALTER , CREATE TEMPORARY TABLES , CREATE VIEW , SHOW VIEW , CREATE ROUTINE, ALTER ROUTINE, EXECUTE ON rewin.* TO 'sina'@'%' IDENTIFIED BY 'zhangyan';
</pre>


5、删除用户<br/>
<code>DROP USER 'sina'@'%';</code><br/>
</p>
<p><br/>
</p>
<p><br/>
PS：如果想了解更多的MySQL操作资料，请参考<a href="http://dev.mysql.com/doc/refman/5.1/zh/">MySQL官方的中文参考手册</a><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-5" class="outline-4">
<h4 id="sec-1-1-5">mysqldump备份数据库</h4>
<div class="outline-text-4" id="text-1-1-5">

<p><code>mysqldump -u root -p bugs | gzip &gt; bugzilla_20121206.sql.gz</code><br/>
但是这个发现在小内存机子上把内存占满了。<br/>
需要添加&ndash;opt参数<br/>
mysqldump &ndash;opt <br/>
这样就会使用一些默认选项，可以正常导出了。<br/>
</p>
<p><br/>
导入数据库<br/>
创建新的数据库用于导入备份的数据库，命令如下：<br/>
<code>mysql –u root –p</code><br/>
输入密码后进入mysql操作界面<br/>
输入：<br/>
<code>create database bugzilla_new</code><br/>
使用如下命令导入备份的Bugzilla 4.0.1的mysql数据库，从新命名数据库名<br/>
<code>gunzip &lt; bugzilla_20121206.sql.gz | mysql –u root –p bugzilla_new</code><br/>
</p>
<p><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-6" class="outline-4">
<h4 id="sec-1-1-6">mysql配置文件</h4>
<div class="outline-text-4" id="text-1-1-6">

<p>一般/etc/my.ini<br/>
</p>
<p><br/>
而一般参考配置在：<br/>
<i>usr/share/mysql</i><br/>
config.huge.ini    config.medium.ini  config.small.ini<br/>
不同的流量的网站和不同配制的服务器环境，当然需要有不同的配制文件了。<br/>
一般的情况下，my-medium.cnf这个配制文件就能满足我们的大多需要。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-7" class="outline-4">
<h4 id="sec-1-1-7">mysql_install_db</h4>
<div class="outline-text-4" id="text-1-1-7">

<p>创造MySQL授权表，否则数据库也是启动不了。<br/>
mysql_install_db，这个命令的用途就是做这个的。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-8" class="outline-4">
<h4 id="sec-1-1-8">设置密码</h4>
<div class="outline-text-4" id="text-1-1-8">

<p><code>mysqladmin -u root password 123456</code><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-9" class="outline-4">
<h4 id="sec-1-1-9">MySQL 远程连接配置</h4>
<div class="outline-text-4" id="text-1-1-9">


</div>

<div id="outline-container-1-1-9-1" class="outline-5">
<h5 id="sec-1-1-9-1">方法一：改表法</h5>
<div class="outline-text-5" id="text-1-1-9-1">

<p>默认mysql帐号不允许从远程登陆，只允许localhost访问。登入mysql后，更改 "mysql" 数据库 里的 "user"（远程数据库的名称） 表里的 "host" 项，把"localhost"改称"%" 。这样你的mysql就可以远程操作了。<br/>
update user set host = '%' where user = 'root';<br/>
注意：这样方法只是把本机localhost访问改为了"%"所有地址IP都可以访问mysql服务器，这样很不安全。默认localhost访问的时候有所有操作权限。所以不安全！推荐用第二个方法。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-9-2" class="outline-5">
<h5 id="sec-1-1-9-2">方法二：授权法 (推荐使用)</h5>
<div class="outline-text-5" id="text-1-1-9-2">

<p>(1)<br/>
</p>
<p><br/>
<pre class="example">grant select,insert,update,delete on *.* to root@"%" Identified by "password";
</pre>

允许地址IP上root用户，密码dboomysql来连接mysql的所有数据库，只付给select,insert,update,delete权限。 这样比较安全。<br/>
</p>
<p><br/>
(2)<br/>
</p>
<p><br/>
<pre class="example">grant select,insert,update,delete on *.* to root@"192.168.1.1" Identified by "password";
</pre>

只允许地址IP（192.168.1.1）上root用户访问更安全了。<br/>
</p>
<p><br/>
(3)<br/>
</p>
<p><br/>
<pre class="example">grant all on *.* to root@"192.168.1.1" Identified by "password"
</pre>


允许地址192.168.1.1上用root用户，密码password来连接mysql的所有数据库，付给所有权限。不太安全。<br/>
</p>
<p><br/>
</p>
<p><br/>
<pre class="example">GRANT ALL PRIVILEGES ON *.* TO root@'%' IDENTIFIED BY 'your paaaword';
</pre>


</p></div>

</div>

<div id="outline-container-1-1-9-3" class="outline-5">
<h5 id="sec-1-1-9-3">实际测试</h5>
<div class="outline-text-5" id="text-1-1-9-3">

<p>使用第一种方法没成功，没有找到user数据库，而且也没有host项。<br/>
使用<br/>
</p>
<p><br/>
<pre class="example">GRANT ALL PRIVILEGES ON *.* TO root@'%' IDENTIFIED BY 'your paaaword';
</pre>

成功。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-1-9-4" class="outline-5">
<h5 id="sec-1-1-9-4">参考</h5>
<div class="outline-text-5" id="text-1-1-9-4">

<p><a href="http://database.51cto.com/art/201006/204537.htm">http://database.51cto.com/art/201006/204537.htm</a><br/>
</p>
<p><br/>
</p></div>
</div>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NFS server]]></title>
    <link href="http://emmoblin.github.com/blog/2013/03/12/nfs-server/"/>
    <updated>2013-03-12T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2013/03/12/nfs-server</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">NFS server</a>
<ul>
<li><a href="#sec-1-1">开启nfs-server和client</a>
<ul>
<li><a href="#sec-1-1-1">server端</a>
<ul>
<li><a href="#sec-1-1-1-1">exportfs</a></li>
</ul>
</li>
<li><a href="#sec-1-1-2">client端</a></li>
<li><a href="#sec-1-1-3">nfs卡住问题</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/service/atom.xml">NFS server</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">开启nfs-server和client</h3>
<div class="outline-text-3" id="text-1-1">

<p>fc18上启动nfs真是比较麻烦，server和client端都需要启动好几个服务，所以需要特别记录一下。<br/>
</p>
<p><br/>
</p>
</div>

<div id="outline-container-1-1-1" class="outline-4">
<h4 id="sec-1-1-1">server端</h4>
<div class="outline-text-4" id="text-1-1-1">


<p><br/>
<pre class="example">[root@dlp ~]# vi /etc/idmapd.conf 
# line 5: uncomment and change to your domain name
Domain = server.world 
[root@dlp ~]# vi /etc/exports 
# write like below *note
/home 10.0.0.0/24(rw,sync,no_root_squash,no_all_squash)
</pre>


/home 表示目录<br/>
ip  允许访问的子网，*代表所有<br/>
no_root_squash:对于登陆NFS主机的共享目录用户如果是root的话则对该目录具有root权限。建议不用为好！<br/>
root_squash:对于登陆NFS主机的共享目录用户使用者如果是root则它的权限将被压缩成匿名使用者，<br/>
同时它的UID和GID都会变成nobody那个系统账号的身份。<br/>
all_squash:不管登陆NFS主机用户身份如何，它的身份都会被压缩成匿名使用者，通常就是nobody<br/>
anonuid:anonuid=xxx,制定NFS服务器/etc/passwd中匿名用户的UID<br/>
anongid:anonuid=xxx,制定NFS服务器/etc/passwd中匿名用户的GID<br/>
sync:数据在请求时写入共享<br/>
async:NFS在写入数据前可响应请求<br/>
secure:NFS通过1024以下的安全端口发送<br/>
insecure:NFS通过1024以上端口发送<br/>
hide:不共享NFS目录的子目录<br/>
no_hide:共享NFS目录的子目录<br/>
</p>
<p><br/>
</p>
<p><br/>
<pre class="src src-sh">[root@dlp ~]# systemctl start rpcbind.service 
[root@dlp ~]# systemctl start nfs-server.service 
[root@dlp ~]# systemctl start nfs-lock.service 
[root@dlp ~]# systemctl start nfs-idmap.service 
[root@dlp ~]# systemctl enable rpcbind.service 
[root@dlp ~]# systemctl enable nfs-server.service 
[root@dlp ~]# systemctl enable nfs-lock.service 
[root@dlp ~]# systemctl enable nfs-idmap.service
</pre>


 最终要的还要关闭防火墙：<br/>
 systemctl disable firewalld.service<br/>
</p>
<p><br/>
</p>
</div>

<div id="outline-container-1-1-1-1" class="outline-5">
<h5 id="sec-1-1-1-1">exportfs</h5>
<div class="outline-text-5" id="text-1-1-1-1">

<p>exportfs [-aruv]<br/>
 -a:全部挂载(或卸载) /etc/exports文件设定<br/>
 -r:重新挂载 /etc/exports设定,也可以同步更新/etc/exports设定<br/>
 -u:卸载某一目录<br/>
 -v:在export时,将共享目录显示在屏幕上<br/>
</p>
<p><br/>
showmount -a<br/>
在NFS Server上显示已经mount上本机NFS目录的Client机器。<br/>
</p>
<p><br/>
</p></div>
</div>

</div>

<div id="outline-container-1-1-2" class="outline-4">
<h4 id="sec-1-1-2">client端</h4>
<div class="outline-text-4" id="text-1-1-2">


<p><br/>
<pre class="example">[root@www ~]# vi /etc/idmapd.conf 
# line 5: uncomment and change to your domain name
 Domain = server.world 
 [root@www ~]# systemctl start rpcbind.service 
 [root@www ~]# systemctl start nfs-lock.service 
 [root@www ~]# systemctl start nfs-idmap.service 
 [root@www ~]# systemctl start nfs-mountd.service 
 [root@www ~]# systemctl enable rpcbind.service 
 [root@www ~]# systemctl enable nfs-lock.service 
 [root@www ~]# systemctl enable nfs-idmap.service 
 [root@www ~]# systemctl enable nfs-mountd.service 
 [root@www ~]# mount -t nfs dlp.server.world:/home /home 
 [root@www ~]# df -h 
Filesystem               Size  Used Avail Use% Mounted on
devtmpfs                 992M     0  992M   0% /dev
tmpfs                   1002M     0 1002M   0% /dev/shm
tmpfs                   1002M  1.5M 1001M   1% /run
tmpfs                   1002M     0 1002M   0% /sys/fs/cgroup
/dev/mapper/fedora-root   16G  1.2G   14G   8% /
tmpfs                   1002M     0 1002M   0% /tmp
/dev/vda1                485M   71M  389M  16% /boot
dlp.server.world:/home    16G  1.2G   14G   8% /home
# home directory on NFS is mounted 
 [root@www ~]# vi /etc/fstab 
/dev/mapper/VolGroup-lv_root /                       ext4    defaults  1 1
UUID=65ec32e2-f459-4d63-b8b0-e18124b50f3a /boot      ext4    defaults  1 2
/dev/mapper/VolGroup-lv_swap swap                    swap    defaults  0 0
# add at the lat line: change home directory this server mounts to the one on NFS
dlp.server.world:/home /home                         nfs     defaults  0 0

</pre>

</p></div>

</div>

<div id="outline-container-1-1-3" class="outline-4">
<h4 id="sec-1-1-3">nfs卡住问题</h4>
<div class="outline-text-4" id="text-1-1-3">

<p>如果服务端意外停止，在客户机上使用 ls，df等磁盘查看命令时，会卡住，并且ctrl+c都不能强制退出。<br/>
原因是默认的mount是“硬”挂载，会不断的重试。解决办法是：<br/>
1、mount的时候加上 -s 参数，作为“软”挂载<br/>
2、umount -f /xxxxx/xxxx 用这个命令来取消挂载。<br/>
如果出现device busy的错误，说明还有进程在使用该挂载点，要把进程停了，才能umount<br/>
</p>
<p><br/>
通过试验发现，这几个方法都不管用。依然一断网就会挂住。<br/>
</p></div>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建dns服务器]]></title>
    <link href="http://emmoblin.github.com/blog/2013/02/20/dnsserver/"/>
    <updated>2013-02-20T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2013/02/20/dnsserver</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">搭建dns服务器</a>
<ul>
<li><a href="#sec-1-1">首先提出一些问题</a></li>
<li><a href="#sec-1-2">BIND服务</a></li>
<li><a href="#sec-1-3">配置文件</a></li>
<li><a href="#sec-1-4">参考</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/service/atom.xml">搭建dns服务器</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">首先提出一些问题</h3>
<div class="outline-text-3" id="text-1-1">

<ol>
<li>什么是 DNS 的授权模式﹖是怎样进行的?<br/>
</li>
<li>zone 和 domain 的差别?<br/>
</li>
<li>什么是 DNS 正解和反解?<br/>
</li>
<li>什么是 DNS 的查询模式?<br/>
</li>
<li>查询过程是怎样进行的?<br/>
</li>
<li>DNS cache 的作用和它对查询流程的影响?<br/>
</li>
</ol>


<p><br/>
</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">BIND服务</h3>
<div class="outline-text-3" id="text-1-2">

<p>在 Linux 上面﹐提供 DNS 服务的套件是叫 bind，<br/>
但执行服务程序名称则是 named。<br/>
请您确定系统上装有 bind﹑bind-utils﹑以及 caching-nameserver 这几个套件。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">配置文件</h3>
<div class="outline-text-3" id="text-1-3">

<p>/etc/named.conf<br/>
如果安装的是bind-chroot，则文件在<br/>
/var/named/chroot/etc/named.conf<br/>
</p>
<p><br/>
/var/named/chroot/etc/named.caching-nameserver.conf<br/>
这个是主要配置文件的模板配置文件（区域模板配置文件<br/>
</p>
<p><br/>
首先生成主要配置文件，复制出一份模板配置文件到此目录下，并更改名字为named.conf <br/>
</p>
<p><br/>
<pre class="src src-sh"><span style="color: #a52a2a;">cd</span>  /var/named/chroot/etc    
cp  named.caching-nameserver.conf  named.conf
</pre>


默认会有三个配置：<br/>
</p>
<p><br/>
<pre class="example">zone "." IN {
  type hint;
  file "named.ca";
};
</pre>

根区域“ . ”(root zone) 的设定﹐同时它是一个 internet ( IN ) 的区域类别( class )。这里还指定了root zone 的服务器种类( type ) 为“hint”(也只有这个 zone 会使用这样的种类)。最后﹐用 file 指定这个区域记录文件为﹕“named.ca”﹐也就是“/var/named/named.ca”档案。<br/>
</p>
<p><br/>
在 root zone 后面﹐您应该还会看到如下这两段,一个是localhost的正向解析，一个是反向解析。不允许自行更新DNS记录。<br/>
</p>
<p><br/>
<pre class="example">zone "localhost" IN {
  type master;
  file "localhost.zone";
  allow-update { none; };
};

zone "0.0.127.in-addr.arpa" IN {
  type master;
  file "named.local";
  allow-update { none; };
}; 
</pre>


首先来看root zone，named.ca<br/>
里边的记录类似如下：<br/>
</p>
<p><br/>
<pre class="example">. 3600000 NS L.ROOT-SERVERS.NET.
L.ROOT-SERVERS.NET. 3600000 A 198.32.64.12
</pre>

以‘ . ’开头的﹐那就是所谓的 root zone 了﹗<br/>
第二栏都是‘ 3600000 ’﹐这是 TTL (Time To Live) 设定﹐也就是在 cache 中保留的时间，<br/>
其后的‘ NS ’是“Name Server”的意思﹐是 DNS 记录名称之一﹐也就是负责这个记录的 name server 是哪一台主机。<br/>
‘ A ’记录﹐也就是 Address 的意思﹐解释 [A-M].ROOT-SERVER.NET. 这些主机各自的 IP 地址所在。<br/>
</p>
<p><br/>
如果您了解 DNS 的查询模式﹐您会知道 DNS 服务器在查询非自己管辖的 zone 的时候﹐首先会向 root 查询下一级的 zone 在哪里﹐然后逐级查询下去。但问题是﹕当 named 刚启动的时候﹐在 cache 里面一片空白﹐它怎么知道 root zone 的 servers 在哪里呢﹖这不是一个矛盾吗﹖所以﹐就必须靠这个档案告诉 named 关于 root zone 的 servers 有哪些﹖以及在哪里﹖<br/>
</p>
<p><br/>
locaohost.zone<br/>
</p>
<p><br/>
</p>
<p><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4">参考</h3>
<div class="outline-text-3" id="text-1-4">

<p><a href="http://wenku.baidu.com/view/4d88c6bf960590c69ec376a2.html">http://wenku.baidu.com/view/4d88c6bf960590c69ec376a2.html</a><br/>
</p>
<p><br/>
</p>
<p><br/>
</p>
<p><br/>
</p>
<p><br/>
</p>
<p><br/>
</p></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenLDAP介绍]]></title>
    <link href="http://emmoblin.github.com/blog/2013/02/13/openldap/"/>
    <updated>2013-02-13T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2013/02/13/openldap</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">OpenLDAP介绍</a>
<ul>
<li><a href="#sec-1-1">LDAP 入门</a></li>
<li><a href="#sec-1-2">LDAP 目录结构</a>
<ul>
<li><a href="#sec-1-2-1">DN</a></li>
<li><a href="#sec-1-2-2">组织单元</a></li>
<li><a href="#sec-1-2-3">个别项</a></li>
<li><a href="#sec-1-2-4">对象类objectclass</a></li>
</ul>
</li>
<li><a href="#sec-1-3">配置openLDAP</a>
<ul>
<li><a href="#sec-1-3-1">rootdn</a></li>
<li><a href="#sec-1-3-2">AC</a></li>
</ul>
</li>
<li><a href="#sec-1-4">插入数据</a>
<ul>
<li><a href="#sec-1-4-1">LDIF 方法</a></li>
</ul>
</li>
<li><a href="#sec-1-5">参考资料</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/service/atom.xml">OpenLDAP介绍</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">LDAP 入门</h3>
<div class="outline-text-3" id="text-1-1">

<p>首字母缩略 LDAP 代表轻量级目录访问协议（Lightweight Directory Access Protocol）。<br/>
信息被集中存储在服务器上的 LDAP 目录中。LDAP 目录是一种数据库；然而，它不是关系数据库。<br/>
它的目录或数据库的结构与 UNIX 文件系统非常相似： <br/>
数据按层次存储；有“根”或“基本 DN”（专有名称，Distinguished Name）；<br/>
目录被进一步细分成组织单元（Organization Units 或 OU）；<br/>
在这些 OU 中是包含数据的项。<br/>
这种树-叶结构不仅使 LDAP 变得可扩展， 而且当进行简单的搜索或查询时，比传统的关系数据库更快。<br/>
</p>
<p><br/>
LDAP 目录几乎可以存储所有类型的数据：电子邮件地址、DNS 信息、NIS 映射、安全性密钥、联系人信息列表和计算机名等。<br/>
可以通过 ACL（访问控制表，Access Control List）来控制对目录的访问。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">LDAP 目录结构</h3>
<div class="outline-text-3" id="text-1-2">


</div>

<div id="outline-container-1-2-1" class="outline-4">
<h4 id="sec-1-2-1">DN</h4>
<div class="outline-text-4" id="text-1-2-1">

<p>LDAP 目录树的“根”或顶部是基本 DN。基本 DN 通常有两种形式：organization=（例如，o=syroidmanor.com）， 或者从组织的 DNS 域组件派生的 DN（dc=syroidmanor,dc=com）。<br/>
</p></div>

</div>

<div id="outline-container-1-2-2" class="outline-4">
<h4 id="sec-1-2-2">组织单元</h4>
<div class="outline-text-4" id="text-1-2-2">

<p>在目录基本 DN 的下面是容器或组织单元（OU），它们从逻辑上对您的数据进行分隔或分组。<br/>
</p>
<p><br/>
<pre class="example">dc=foobar,dc=com
                ou=customers
                        ou=northamerica
                        ou=southamerica
                        ou=asia
                        ou=europe
</pre>

</p></div>

</div>

<div id="outline-container-1-2-3" class="outline-4">
<h4 id="sec-1-2-3">个别项</h4>
<div class="outline-text-4" id="text-1-2-3">

<p>项只是存储属性的地方。<br/>
属性是可用来将一种类型的信息存储在目录中的容器。<br/>
每个属性都有一种类型和一个或多个值。<br/>
LDAP 目录中的每个项都有唯一的 DN，每个 DN 都由两部分组成 ―“相对专有名称”（或 RDN）和对 LDAP 目录结构中存储记录的位置的引用。 几乎存储在 LDAP 目录中的所有数据都有一个唯一名称，这个名称通常存储在 cn 属性中。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-2-4" class="outline-4">
<h4 id="sec-1-2-4">对象类objectclass</h4>
<div class="outline-text-4" id="text-1-2-4">

<p>对象类由 LDAP 目录使用来定义给定类型的对象可以有哪些属性。对象类还定义项必须有什么属性， 以及项可以有什么属性。所有对象类都从其父对象类继承需求，然后添加它们自己的需求。<br/>
对象类有五个组件：OID（对象标识）、唯一名称、父对象（SUP）、任何需要的属性（MUST）和 允许的属性列表（MAY）。<br/>
如：<br/>
</p>
<p><br/>
<pre class="example">objectclass ( 2.5.6.6 NAME 'person' SUP top STRUCTURAL
        MUST ( sn $ cn )
        MAY ( userPassword $ telephoneNumber $ seeAlso $ description ) )
</pre>


</p></div>
</div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">配置openLDAP</h3>
<div class="outline-text-3" id="text-1-3">


</div>

<div id="outline-container-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">rootdn</h4>
<div class="outline-text-4" id="text-1-3-1">

<p>rootdn 项控制谁可以对目录数据库进行写操作，以及他们要这样做所必须提供的密码。<br/>
您在 rootdn 项的 cn= 部分填充的任何项都是对数据库有完全读／写访问权的用户。<br/>
如果您打算存储在目录中的数据只有一点点机密性，则对密码进行散列处理。可以用 slappasswd 实用程序完成它，如下所示：<br/>
</p>
<p><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-3-2" class="outline-4">
<h4 id="sec-1-3-2">AC</h4>
<div class="outline-text-4" id="text-1-3-2">


<p><br/>
<pre class="example">access to dn=".*,dc=syroidmanor,dc=com" attr=userPassword
        by dn="cn=root,dc=syroidmanor,dc=com" write
        by self write
        by * auth
access to dn=".*,dc=syroidmanor,dc=com" attr=mail
        by dn="cn=root,dc=syroidmanor,dc=com" write
        by self write
        by * read
</pre>

上面的配置仅允许 userPassword 属性的所有者修改项，但仅当所有者提供他或她的优先密码时才允许进行修改。 在所有其它情况下，只能出于认证目的来访问该项，而不能查看它。 第二个 access to&hellip; 项允许用户修改自己的电子邮件地址<br/>
</p>
<p><br/>
</p></div>
</div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4">插入数据</h3>
<div class="outline-text-3" id="text-1-4">


</div>

<div id="outline-container-1-4-1" class="outline-4">
<h4 id="sec-1-4-1">LDIF 方法</h4>
<div class="outline-text-4" id="text-1-4-1">


<p><br/>
<pre class="example">dn: uid=juser,ou=people,dc=syroidmanor,dc=com
uid: juser
cn: Joe User
givenname: Joe
sn: User
mail: juser@syroidmanor.com
objectClass: top
objectClass: mailRecipient
objectClass: person
objectClass: inetOrgPerson
</pre>




</p></div>
</div>

</div>

<div id="outline-container-1-5" class="outline-3">
<h3 id="sec-1-5">参考资料</h3>
<div class="outline-text-3" id="text-1-5">

<ol>
<li><a href="http://www.ibm.com/developerworks/cn/education/linux/l-ldap/section2.html">构建基于 LDAP 的地址簿</a><br/>
</li>
</ol>

</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
