<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Emmoblin Blog]]></title>
  <link href="http://emmoblin.github.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://emmoblin.github.com/"/>
  <updated>2013-02-13T13:03:38+08:00</updated>
  <id>http://emmoblin.github.com/</id>
  <author>
    <name><![CDATA[emmoblin]]></name>
    <email><![CDATA[emmoblin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux_3g拨号]]></title>
    <link href="http://emmoblin.github.com/blog/2013/01/06/linux-g-dial/"/>
    <updated>2013-01-06T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2013/01/06/linux-g-dial</id>
    <content type="html"><![CDATA[<div><div><p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">linux下3g网卡拨号</h3>
<div class="outline-text-3" id="text-1-1">

<p>需要安装的软件usb_modeswitch,wvdial<br/>
usb_modeswitch用于将usb3g转换为usb modem模式，这样才能拨号。最好到官网下载最新代码，包含的3g网卡类型会更全。最主要的就是usb_modeswitch_data。<br/>
<a href="http://www.draisberghof.de/usb_modeswitch/#download">http://www.draisberghof.de/usb\_modeswitch/#download</a><br/>
</p>
<p><br/>
</p>
</div>

<div id="outline-container-1-1-1" class="outline-4">
<h4 id="sec-1-1-1">安装usb_modeswitch_data</h4>
<div class="outline-text-4" id="text-1-1-1">

<p>进入目录，执行<br/>
sudo make install<br/>
会安装对应的udev文件到/lib/udev/rules.d目录。<br/>
</p>
<p><br/>
不过我发现自动转换没有效果，暂时先不查了。<br/>
直接使用命令行转：<br/>
usb_modeswitch -c /etc/usb_modeswitch.conf<br/>
如果转换成功会出现/dev/ttyUSB0-3，dmesg也会有输出信息。<br/>
</p>
<p><br/>
usb_modeswitch.conf<br/>
</p>
<p><br/>
<pre class="example">######################################################## 
# ZTE A371B
#
# Contributor: Wang Lei

DefaultVendor= 0x19d2
DefaultProduct=0x0169

TargetVendor=  0x19d2
TargetProduct= 0x0170

MessageContent="5553424312345678000000000000061b000000020000000000000000000000"
NeedResponse=1
</pre>


</p></div>

</div>

<div id="outline-container-1-1-2" class="outline-4">
<h4 id="sec-1-1-2">wvdial</h4>
<div class="outline-text-4" id="text-1-1-2">

<p>这个难了，wvdial负责发送AT命令给usb modem，进行拨号。但不同的3g卡发送的指令也不一样。<br/>
我是在xp上安装了usb抓包软件，把xp上官方的3g拨号过程进行了抓包分析，提取出如下序列：<br/>
</p>
<p><br/>
</p>
<p><br/>
<pre class="example">[Dialer Defaults]
Init1 = AT
Init2 = AT+CIMI
Init3 = AT+CMEE=1
Init4 = ATE0
Init5 = AT+CFUN=1
Init6 = AT+CLCK="SC",2
Init7 = AT+cgdcont=1,"ip","CMNET"
Modem Type = USB Modem
Baud = 460800
New PPPD = yes
Modem = /dev/ttyUSB0
ISDN = 0
Phone = *98*1#
Password = any
Username = any
Stupid Mode = 1
</pre>



</p></div>

</div>

<div id="outline-container-1-1-3" class="outline-4">
<h4 id="sec-1-1-3">遇到的问题</h4>
<div class="outline-text-4" id="text-1-1-3">

<p>我的x230上无线鼠标的usb接收器貌似总是捣乱，拔了接收器，换了个usb口插3g，就可以ok了。<br/>
</p>
<p><br/>
</p></div>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memwatch]]></title>
    <link href="http://emmoblin.github.com/blog/2012/10/30/memwatch-/"/>
    <updated>2012-10-30T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2012/10/30/memwatch-</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">memwatch</a>
<ul>
<li><a href="#sec-1-1">Memwatch简介</a></li>
<li><a href="#sec-1-2">MemWatch的内存处理</a></li>
<li><a href="#sec-1-3">初始化和结束处理</a></li>
<li><a href="#sec-1-4">MemWatch的I/O 操作</a></li>
<li><a href="#sec-1-5">使用</a>
<ul>
<li><a href="#sec-1-5-1">使用MemWatch提供的功能</a></li>
</ul>
</li>
<li><a href="#sec-1-6">Memwatch使用注意</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/tools/atom.xml">memwatch</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">Memwatch简介</h3>
<div class="outline-text-3" id="text-1-1">

<p>在三种检测工具当中，设置最简单的算是memwatch，和dmalloc一样，<br/>
它能检测未释放的内存、同一段内存被释放多次、位址存取错误及不当使用未分配之内存区域。<br/>
请往<br/>
<a href="http://www.linkdata.se/sourcecode.html">http://www.linkdata.se/sourcecode.html</a><br/>
下载最新版本的Memwatch。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">MemWatch的内存处理</h3>
<div class="outline-text-3" id="text-1-2">

<p>MemWatch将所有分配的内存用0xFE填充，所以，如果你看到错误的数据是用0xFE填充的，那就是你没有初始化数据。<br/>
例外是calloc()，它会直接把分配的内存用0填充。<br/>
</p>
<p><br/>
MemWatch将所有已释放的内存用0xFD填充(zapped with 0xFD).<br/>
如果你发现你使用的数据是用0xFD填充的，那你就使用的是已释放的内存。<br/>
在这种情况，注意MemWatch会立即把一个"释放了的块信息" 填在释放了的数据前。<br/>
这个块包括关于内存在哪儿释放的信息，以可读的文本形式存放，格式 为"FBI&lt;counter&gt;filename(line)"。<br/>
如:"FBI&lt;267&gt;test.c(12)".使用FBI会降 低free()的速度，所以默认是关闭的。使用mwFreeBufferInfo(1)开启。<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">初始化和结束处理</h3>
<div class="outline-text-3" id="text-1-3">

<p>一般来说，在程序中使用MemWatch的功能，可以手动添加mwInit()进行初始化，并用对应的mwTerm ()进行结束处理。<br/>
一般不需要手动添加，memwatch会在第一个malloc的时候自动初始化，并在atexit中添加mwTerm。<br/>
</p>
<p><br/>
如果自动初始化不合适或者程序比较特殊，请显式调用mwInit()和mwTerm().<br/>
比如，有的时候明明程序没有问题，而memwatch显示内存泄漏，这时就需要手动调用初始化和结束。<br/>
</p>
<p><br/>
涉及的函数主要有：<br/>
mwInit()    mwTerm()    mwAbort()<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-4" class="outline-3">
<h3 id="sec-1-4">MemWatch的I/O 操作</h3>
<div class="outline-text-3" id="text-1-4">

<p>对于一般的操作，MemWatch创建memwatch.log文件。有时，该文件不能被创建;<br/>
MemWatch会试图创建memwatNN.log文件，NN在01~99之间。<br/>
</p>
<p><br/>
如果你不能使用日志，或者不想使用，也没有问题。<br/>
只要使用类型为"void func(int c)"的参数调用mwSetOutFunc()，然后所有的输出都会按字节定向到该函数.<br/>
</p>
<p><br/>
当ASSERT或者VERIFY失败时，MemWatch也有Abort/Retry/Ignore处理机制。<br/>
默认的处理机制没有I/O操作，但是会自动中断程序。<br/>
你可以使用任何其他Abort/Retry/Ignore的处理机制,只要以参数"void func(int c)"调用mwSetAriFunc()。<br/>
</p>
<p><br/>
涉及的函数主要有：<br/>
mwTrace()           mwPuts()        mwSetOutFunc()  mwSetAriFunc()<br/>
mwSetAriAction()    mwAriHandler()  mwBreakOut()<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-5" class="outline-3">
<h3 id="sec-1-5">使用</h3>
<div class="outline-text-3" id="text-1-5">

<p>在要使用MemWatch的.c文件中包含头文件"memwatch.h"<br/>
</p>
<p><br/>
使用GCC编译（注意：不是链接）自己的程序时，加入-DMEMWATCH -DMW_STDIO<br/>
如：gcc -DMEMWATCH -DMW_STDIO –o test.o –c  test1.c memwatch.c<br/>
</p>
<p><br/>
</p>
</div>

<div id="outline-container-1-5-1" class="outline-4">
<h4 id="sec-1-5-1">使用MemWatch提供的功能</h4>
<div class="outline-text-4" id="text-1-5-1">

<ol>
<li>mwTRACE，mwASSERT，mwVERIFY和mwPuts<br/>
</li>
<li>ARI机制即程序设置的“Abort, Retry, Ignore选择陷阱<br/>
</li>
<li>mwSetOutFunc<br/>
   将输出转向调用者给出的函数(参数即函数地址)。参数为NULL，表示把输出写入日志文件memwatch.log.<br/>
</li>
<li>mwIsReadAddr<br/>
   检查内存是否有读取的权限<br/>
</li>
<li>mwIsSafeAddr<br/>
   检查内存是否有读、写的权限<br/>
</li>
<li>mwStatistics<br/>
   设置状态搜集器的行为。对应的参数采用宏定义。<br/>

<p><br/>
   #define MW_STAT_GLOBAL  0       <i>* 仅搜集全局状态信息 *</i><br/>
   #define MW_STAT_MODULE  1       <i>* 搜集模块级的状态信息 *</i><br/>
   #define MW_STAT_LINE    2       <i>* 搜集代码行级的状态信息 *</i><br/>
   #define MW_STAT_DEFAULT 0       <i>* 默认状态设置 *</i><br/>
</p></li>
</ol>


<p><br/>
</p></div>
</div>

</div>

<div id="outline-container-1-6" class="outline-3">
<h3 id="sec-1-6">Memwatch使用注意</h3>
<div class="outline-text-3" id="text-1-6">

<p>Memwatch 的优点是无需特別配置，不需安装便能使用，但缺点是它会拖慢程序的运行速度，尤其是释放内存时它会作大量检查。<br/>
但它比mtrace和dmalloc多了 一项功能，就是能模拟系统内存不足的情況，<br/>
使用者只需用mwLimit(long num_of_byte)函数来限制程式的heap memory大小(以byte单位)。<br/>
</p>
<p><br/>
最详细的使用说明(包括优点缺点，运行原理等)已在README中列出，本人强烈建议各位读者参考该文件。<br/>
</p>
<p><br/>
</p>
<p><br/>
</p></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svn使用]]></title>
    <link href="http://emmoblin.github.com/blog/2012/10/16/svn/"/>
    <updated>2012-10-16T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2012/10/16/svn</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">svn使用</a>
<ul>
<li><a href="#sec-1-1">svn libneon的问题</a></li>
<li><a href="#sec-1-2">自己编译，真的不容易啊</a></li>
<li><a href="#sec-1-3">tftpd-hpa</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/tools/atom.xml">svn使用</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">svn libneon的问题</h3>
<div class="outline-text-3" id="text-1-1">

<p>ubuntu安装的svn要使用https时，默认使用的libneon-gnutls有点兼容性问题。所以导致的错误是：<br/>
SSL handshake failed: SSL 错误：在证书中检测到违规的密钥用法。<br/>
解决办法：<br/>
<a href="http://www.yeap.de/blog2.0/archives/260-Subversion-Certificate-Problems-with-Ubuntu-Precise-Pangolin.html">http://www.yeap.de/blog2.0/archives/260-Subversion-Certificate-Problems-with-Ubuntu-Precise-Pangolin.html</a><br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">自己编译，真的不容易啊</h3>
<div class="outline-text-3" id="text-1-2">

<p>cd openssl<br/>
由于是64bit系统，所以需要添加fPIC<br/>
./config -fPIC<br/>
但是cropt目录不好添加fPIC，难道生成的.a难道也需要fPIC吗？，所以无奈，只能先安装系统的openssl<br/>
apt-get install openssl-dev openssl<br/>
</p>
<p><br/>
cd subversion<br/>
./configure &ndash;with-ssl=openssl &ndash;with-neon=./neon &ndash;with-openssl=/usr<br/>
出现warnning无用理会直接make<br/>
</p>
<p><br/>
</p></div>

</div>

<div id="outline-container-1-3" class="outline-3">
<h3 id="sec-1-3">tftpd-hpa</h3>
<div class="outline-text-3" id="text-1-3">

<p>atftpd 设置半天不能启动，连直接输入命令行都不能启动。<br/>
所以换成tftpd-hpa，非常简单。<br/>
不过要想能够上传文件需要修改配置：<br/>
vi /etc/default/tftpd-hpa<br/>
添加&ndash;create<br/>
注意-s参数不能去掉。<br/>
</p>
<p><br/>
客户端使用atftp。<br/>
</p>
<p><br/>
</p>
<p><br/>
</p></div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[串口工具ckermit]]></title>
    <link href="http://emmoblin.github.com/blog/2012/10/16/ckermit/"/>
    <updated>2012-10-16T00:00:00+08:00</updated>
    <id>http://emmoblin.github.com/blog/2012/10/16/ckermit</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">串口工具ckermit</a>
<ul>
<li><a href="#sec-1-1">默认配置文件</a></li>
<li><a href="#sec-1-2">操作</a></li>
</ul>
</li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><a href="http://emmoblin.github.comblog/categories/tools/atom.xml">串口工具ckermit</a></h2>
<div class="outline-text-2" id="text-1">


<p><br/>
</p>
</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">默认配置文件</h3>
<div class="outline-text-3" id="text-1-1">

<p>/etc/kermit/kermrc<br/>
一般配置一个home下的自己的配置文件就ok了。<br/>
~/.mykermrc<br/>
</p>
<p><br/>
<pre class="example">set line /dev/ttyS0
set speed 9600
set carrier-watch off
set handshake none
set flow-control none
robust
set file type bin
set file name lit
set rec pack 1000
set send pack 1000
set window 5
</pre>


</p></div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">操作</h3>
<div class="outline-text-3" id="text-1-2">

<p>C-\ 切换到命令行<br/>
c 打开链接<br/>
</p>
<p><br/>
</p></div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
